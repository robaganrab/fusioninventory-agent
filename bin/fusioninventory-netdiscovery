#!/usr/bin/perl

use strict;
use warnings;
use lib './lib';

use English qw(-no_match_vars);
use Getopt::Long;
use Pod::Usage;

use FusionInventory::Agent;
use FusionInventory::Agent::Target;
use FusionInventory::Agent::Task::NetDiscovery;

my %setup = (
    confdir => './etc',
    datadir => './share',
    libdir  => './lib',
    vardir  => './var',
);

my $options = {
    community => 'public',
    threads   => 1
};

GetOptions(
    $options,
    'first=s',
    'last=s',
    'dictionary=s',
    'community=s',
    'entity=s',
    'threads=i',
    'target=s',
    'timeout=i',
    'verbose',
    'debug+',
    'help',
    'version'
) or pod2usage(-verbose => 0);

if ($options->{version}) {
  print "NetDiscovery task $FusionInventory::Agent::Task::NetDiscovery::VERSION\n";
  exit 0;
}
pod2usage(-verbose => 0, -exitval => 0) if $options->{help};

pod2usage(
    -message => "no first address, aborting\n", -verbose => 0
) unless $options->{first};
pod2usage(
    -message => "no last address, aborting\n", -verbose => 0
) unless $options->{last};

my $agent = FusionInventory::Agent->new(%setup);

my $discovery = FusionInventory::Agent::Task::NetDiscovery->new(
    config     => $agent->{config},
    confdir    => $agent->{confdir},
    datadir    => $agent->{datadir},
    logger     => $agent->{logger},
    deviceid   => $agent->{deviceid},
    controller => FusionInventory::Agent::Task::NetInventory::Controller->new(),
);

$discovery->{options} = {
    NAME => 'NETDISCOVERY',
    PARAM => [
        {
            PID               => 1,
            THREADS_DISCOVERY => $options->{threads},
            TIMEOUT           => $options->{timeout},
        }
    ],
    RANGEIP => [
        {
            ID      => 1,
            IPSTART => $options->{first},
            IPEND   => $options->{last},
        }
    ],
    AUTHENTICATION => [
        {
            ID        => 1,
            COMMUNITY => $options->{community},
            VERSION   => '3'
        },
        {
            ID        => 1,
            COMMUNITY => $options->{community},
            VERSION   => '2c'
        },
        {
            ID        => 1,
            COMMUNITY => $options->{community},
            VERSION   => '1'
        }
    ]
};
if ($options->{dictionary}) {
    die "no such file $options->{dictionary}"
        unless -f $options->{dictionary};
    $discovery->{options}->{DICO} = getDictionary($options->{dictionary});
}
if (defined($options->{entity})) {
    $discovery->{options}->{RANGEIP}->[0]->{ENTITY} = $options->{entity};
}

my $target = FusionInventory::Agent::Target->create(
    target  => $options->{target},
    task    => 'netdiscovery',
    verbose => $options->{verbose}
);

eval {
    $agent->init(options => $options);
    $agent->runSingleTask(task => $discovery, target => $target);
};

sub getDictionary {
    my ($file) = @_;

    open (my $handle, '<', $file) or die "Can't open $file: $ERRNO";
    local $INPUT_RECORD_SEPARATOR;
    my $string = <$handle>;
    close $handle;

    return $string;
}

package FusionInventory::Agent::Task::NetInventory::Controller;

sub new {
    my ($class, %params) = @_;

     my $storage = FusionInventory::Agent::Task::NetInventory::Storage->new();

    return bless {
        storage => $storage
    }, $class;
}

sub getStorage {
    my ($self, %params) = @_;

    return $self->{storage};
}

package FusionInventory::Agent::Task::NetInventory::Storage;

sub new {
    my ($class) = @_;

    return bless {}, $class;
}

sub save {
}

sub restore {
    return {
        dictionary =>
            FusionInventory::Agent::Task::NetDiscovery::Dictionary->new()
    };
}

__END__

=head1 NAME

fusioninventory-netdiscovery - Standalone network discovery

=head1 SYNOPSIS

fusioninventory-netdiscovery [options] --first <start> --last <stop>

  Options:
    --first address IP range first address
    --last address  IP range last address
    --dictionary    dictionary file
    --community     community string (default: public)
    --entity        GLPI entity
    --threads nb    number of discovery threads (default: 1)
    --target target where to send result (default: stdout)
    --timeout val   SNMP timeout (default: 15s)
    --verbose       verbose output (control messages)
    --debug         debug output (execution traces)
    -h --help       print this message and exit
    --version       print the task version and exit

=head1 DESCRIPTION

F<fusioninventory-netdiscovery> allows to run a network discovery task without a
GLPI server.
